# here we are using job and service container to run the test cases and code coverage 
name: Solar system workflow CICD

on:
  workflow_dispatch:
  push:
    branches:
    - main
    - feature/*

env:
    MONGO_URI: "mongodb+srv://supercluster.d83jj.mongodb.net/superData"
    MONGO_USERNAME: ${{ vars.MONGO_USERNAME }}
    MONGO_PASSWORD: ${{ secrets.MONGO_PASSWORD }}
    
   

jobs:
    unit-testing:
        name: Unit testing
        services:
          mongo-db:
            image: siddharth67/mongo-db:non-prod
            ports:
              - 27017:27017
        env:
           MONGO_URI: "mongodb://localhost:27017/superData"
           MONGO_USERNAME: non-prod-user
           MONGO_PASSWORD: non-prod-password
    
        strategy:
          matrix:
            os: [ubuntu-latest] # [ubuntu-latest, macos-latest] , as macos-latest taking more time 
            nodejs-version: [18]

        runs-on: ${{ matrix.os }}
        steps:
        - name: Checkout repository
          uses: actions/checkout@v4

        - name: set up node js version- ${{ matrix.nodejs-version}}
          uses: actions/setup-node@v3
          with:
            node-version: ${{ matrix.nodejs-version}}

        - name: Cache NPM dependencies
          uses: actions/cache@v4
          with:
            path: node_modules
            key: ${{ runner.os}}-node_modules-${{ hashFiles('package-lock.json') }}

        - name: Install dependencies
          run: npm install

        - name: Run unit tests
          id: unit-tests
          run: npm test

        - name: Archive test result
          if: always()
          uses: actions/upload-artifact@v4
          with:
            name: mocha-test-results-${{ matrix.os }}-node${{ matrix.nodejs-version }}-${{ github.run_id }}
            path: test-results.xml
            retention-days: 5

    code-coverage:
      name: Code coverage
      container:
        image: node:18

      services:
          mongo-db:
            image: siddharth67/mongo-db:non-prod
            options: --network-alias mongo
                
      env:
         MONGO_URI: "mongodb://mongo:27017/superData" 
         MONGO_USERNAME: non-prod-user
         MONGO_PASSWORD: non-prod-password

      runs-on: ubuntu-latest
      steps:
      - name: Checkout repository
        uses: actions/checkout@v4

    #   - name: set up node js version- 18
    #     uses: actions/setup-node@v3
    #     with:
    #       node-version: 18

      - name: Cache NPM dependencies
        uses: actions/cache@v4
        with:
          path: node_modules
          key: ${{ runner.os}}-node_modules-${{ hashFiles('package-lock.json') }}

        
      - name: Install dependencies
        run: npm install

      - name: Run code coverage
        continue-on-error: true
        run: npm run coverage

      - name: Archive code coverage result
        uses: actions/upload-artifact@v4
        with:
          name: code-coverage
          path: coverage
          retention-days: 5

    docker:
      name: Containerize
      needs: [unit-testing, code-coverage]
      permissions:
        packages: write
      runs-on: ubuntu-latest
      steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: DockerHub login
        uses: docker/login-action@v3
        with:
          username: ${{ vars.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_PASSWORD }}

      - name: GHRC login
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.repository_owner }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Docker build for testing
        uses: docker/build-push-action@v6
        with:
          context: .
          push: false
          tags: ${{ vars.DOCKERHUB_USERNAME}}/solar-system:${{ github.sha }}

      - name: Docker Image Testing
        run: |
          docker images 
          docker run --name solar-system-app -d \
            -p 3000:3000 \
            -e MONGO_URI=$MONGO_URI \
            -e MONGO_USERNAME=${{ vars.MONGO_USERNAME}} \
            -e MONGO_PASSWORD=${{ secrets.MONGO_PASSWORD}} \
            ${{ vars.DOCKERHUB_USERNAME}}/solar-system:${{ github.sha }}
          
          export IP=$(docker inspect -f '{{range.NetworkSettings.Networks}}{{.IPAddress}}{{end}}' solar-system-app)
          echo $IP
          
          echo Testing Image URL using wget
          wget -q -O - 127.0.0.1:3000/live | grep live

      - name: Pushing to Multiple container registry (dockerhub and ghcr.io)
        uses: docker/build-push-action@v6
        with:
          context: .
          push: true
          tags: |
            ${{ vars.DOCKERHUB_USERNAME}}/solar-system:${{ github.sha }}
            ghcr.io/sh1vam6/solar-system:${{ github.sha }}  

    dev-deploy:
      if: contains(github.ref, 'feature/')
      name: Deploy to dev
      environment:
        name: development
        url: https://${{ steps.set-ingress-host-address.outputs.APP_INGRESS_HOST }}
      needs: docker
      outputs:
        APP_INGRESS_HOST: ${{ steps.set-ingress-host-address.outputs.APP_INGRESS_HOST }}
      runs-on: ubuntu-latest
      steps:
      - name: checkout repository
        uses: actions/checkout@v4


      - name: Install kubectl cli
        uses: azure/setup-kubectl@v4
        with:
          version: 'v1.32.0'

      - name: set kubeconfig file
        uses: azure/k8s-set-context@v4
        with:
          method: kubeconfig
          kubeconfig: ${{ secrets.KUBECONFIG}}

      - name: Verify Kubernetes cluster
        run: |
           kubectl cluster-info
           kubectl get nodes 

      - name: Save nginx ingress controller ip as GITHUB Env Variable
        run: |
          echo "INGRESS_IP=$(kubectl get svc -n ingress-nginx ingress-nginx-controller -o jsonpath='{.status.loadBalancer.ingress[0].ip}')" >> $GITHUB_ENV

      - name: Replace token in Manifest file
        uses: cschleiden/replace-tokens@v1
        with:
          tokenPrefix: '${'
          tokenSuffix: '}'
          files: '["kubernetes/development/*.yaml"]'
        env:
            NAMESPACE: ${{ vars.NAMESPACE}}
            REPLICAS: ${{ vars.REPLICAS}}
            K8S_IMAGE: ${{ vars.DOCKERHUB_USERNAME}}/solar-system:${{ github.sha }}
            INGRESS_IP: ${{ env.INGRESS_IP }}

      - name: check files
        run: |
           cat kubernetes/development/*.yaml

      - name: Create MongoDb Secrets
        run: |
            kubectl -n ${{ vars.NAMESPACE}} create secret generic mongo-creds \
            --from-literal=MONGO_URI=${{env.MONGO_URI}} \
            --from-literal=MONGO_USERNAME=${{vars.MONGO_USERNAME}} \
            --from-literal=MONGO_PASSWORD=${{secrets.MONGO_PASSWORD}} \
            --save-config \
            --dry-run=client \
            -o yaml | kubectl apply -f -

      - name: Deploy to dev Env
        run: |
            kubectl apply -f kubernetes/development

    # after creating all the above steps , i can see in my cluster all the pods are running and to access the application 
    # kubectl get ing -n develpment , it will give the hostname and ip address of the application
    # i can access the application using the hostname and ip address

      - name: Set app ingress host URL
        id: set-ingress-host-address
        run: |
            echo "APP_INGRESS_HOST=$(kubectl get ing -n ${{ vars.NAMESPACE}} -o jsonpath='{.items[0].spec.tls[0].hosts[0]}')" >> $GITHUB_OUTPUT


    dev-integration-testing:
      if: contains(github.ref, 'feature/')
      name: Dev Integration testing
      needs: dev-deploy
      runs-on: ubuntu-latest
      steps:
      - name: Test url output using curl and jq
        env:
            URL: ${{ needs.dev-deploy.outputs.APP_INGRESS_HOST}}
        run: |
            echo $URL
            echo "----------------"
            curl https://$URL/live | jq -r .status | grep -i live
         



    prod-deploy:
                if: github.ref == 'refs/head/main'
                name: Deploy to prod
                environment:
                  name: production
                  url: https://${{ steps.set-ingress-host-address.outputs.APP_INGRESS_HOST }}
                # needs: dev-integration-testing
                needs: docker
                outputs:
                  APP_INGRESS_HOST: ${{ steps.set-ingress-host-address.outputs.APP_INGRESS_HOST }}
                runs-on: ubuntu-latest
                steps:
                - name: checkout repository
                  uses: actions/checkout@v4
          
          
                - name: Install kubectl cli
                  uses: azure/setup-kubectl@v4
                  with:
                    version: 'v1.32.0'
          
                - name: set kubeconfig file
                  uses: azure/k8s-set-context@v4
                  with:
                    method: kubeconfig
                    kubeconfig: ${{ secrets.KUBECONFIG}}
          
                - name: Verify Kubernetes cluster
                  run: |
                     kubectl cluster-info
                     kubectl get nodes 
          
                - name: Save nginx ingress controller ip as GITHUB Env Variable
                  run: |
                    echo "INGRESS_IP=$(kubectl get svc -n ingress-nginx ingress-nginx-controller -o jsonpath='{.status.loadBalancer.ingress[0].ip}')" >> $GITHUB_ENV
          
                - name: Replace token in Manifest file
                  uses: cschleiden/replace-tokens@v1
                  with:
                    tokenPrefix: '${'
                    tokenSuffix: '}'
                    files: '["kubernetes/production/*.yaml"]'
                  env:
                      NAMESPACE: ${{ vars.NAMESPACE}}
                      REPLICAS: ${{ vars.REPLICAS}}
                      K8S_IMAGE: ${{ vars.DOCKERHUB_USERNAME}}/solar-system:${{ github.sha }}
                      INGRESS_IP: ${{ env.INGRESS_IP }}
          
                - name: check files
                  run: |
                     cat kubernetes/production/*.yaml
          
                - name: Create MongoDb Secrets
                  run: |
                      kubectl -n ${{ vars.NAMESPACE}} create secret generic mongo-creds \
                      --from-literal=MONGO_URI=${{env.MONGO_URI}} \
                      --from-literal=MONGO_USERNAME=${{vars.MONGO_USERNAME}} \
                      --from-literal=MONGO_PASSWORD=${{secrets.MONGO_PASSWORD}} \
                      --save-config \
                      --dry-run=client \
                      -o yaml | kubectl apply -f -
          
                - name: Deploy to prod Env
                  run: |
                      kubectl apply -f kubernetes/production
          
              # after creating all the above steps , i can see in my cluster all the pods are running and to access the application 
              # kubectl get ing -n develpment , it will give the hostname and ip address of the application
              # i can access the application using the hostname and ip address
          
                - name: Set app ingress host URL
                  id: set-ingress-host-address
                  run: |
                      echo "APP_INGRESS_HOST=$(kubectl get ing -n ${{ vars.NAMESPACE}} -o jsonpath='{.items[0].spec.tls[0].hosts[0]}')" >> $GITHUB_OUTPUT
          
          
    prod-integration-testing:
                if: github.ref == 'refs/head/main'
                name: Prod Integration testing
                needs: prod-deploy
                runs-on: ubuntu-latest
                steps:
                - name: Test url output using curl and jq
                  env:
                      URL: ${{ needs.prod-deploy.outputs.APP_INGRESS_HOST}}
                  run: |
                      echo $URL
                      echo "----------------"
                      curl https://$URL/live | jq -r .status | grep -i live

      