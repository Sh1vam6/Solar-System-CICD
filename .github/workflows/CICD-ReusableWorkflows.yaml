# here we are using job and service container to run the test cases and code coverage 
name: Solar system workflow CICD

on:
  workflow_dispatch:
  push:
    branches:
    - main
    - feature/*

env:
    MONGO_URI: "mongodb+srv://supercluster.d83jj.mongodb.net/superData"
    MONGO_USERNAME: ${{ vars.MONGO_USERNAME }}
    MONGO_PASSWORD: ${{ secrets.MONGO_PASSWORD }}
    
   

jobs:
    unit-testing:
        name: Unit testing
        services:
          mongo-db:
            image: siddharth67/mongo-db:non-prod
            ports:
              - 27017:27017
        env:
           MONGO_URI: "mongodb://localhost:27017/superData"
           MONGO_USERNAME: non-prod-user
           MONGO_PASSWORD: non-prod-password
    
        strategy:
          matrix:
            os: [ubuntu-latest] # [ubuntu-latest, macos-latest] , as macos-latest taking more time 
            nodejs-version: [18]

        runs-on: ${{ matrix.os }}
        steps:
        - name: Checkout repository
          uses: actions/checkout@v4

        - name: set up node js version- ${{ matrix.nodejs-version}}
          uses: actions/setup-node@v3
          with:
            node-version: ${{ matrix.nodejs-version}}

        - name: Cache NPM dependencies
          uses: actions/cache@v4
          with:
            path: node_modules
            key: ${{ runner.os}}-node_modules-${{ hashFiles('package-lock.json') }}

        - name: Install dependencies
          run: npm install

        - name: Run unit tests
          id: unit-tests
          run: npm test

        - name: Archive test result
          if: always()
          uses: actions/upload-artifact@v4
          with:
            name: mocha-test-results
            path: test-results.xml
            retention-days: 5

    code-coverage:
      name: Code coverage
      container:
        image: node:18

      services:
          mongo-db:
            image: siddharth67/mongo-db:non-prod
            options: --network-alias mongo
                
      env:
         MONGO_URI: "mongodb://mongo:27017/superData" 
         MONGO_USERNAME: non-prod-user
         MONGO_PASSWORD: non-prod-password

      runs-on: ubuntu-latest
      steps:
      - name: Checkout repository
        uses: actions/checkout@v4

    #   - name: set up node js version- 18
    #     uses: actions/setup-node@v3
    #     with:
    #       node-version: 18

      - name: Cache NPM dependencies
        uses: actions/cache@v4
        with:
          path: node_modules
          key: ${{ runner.os}}-node_modules-${{ hashFiles('package-lock.json') }}

        
      - name: Install dependencies
        run: npm install

      - name: Run code coverage
        continue-on-error: true
        run: npm run coverage

      - name: Archive code coverage result
        uses: actions/upload-artifact@v4
        with:
          name: code-coverage
          path: coverage
          retention-days: 5

    report-S3:
        name: upload report to s3
        needs: [unit-testing, code-coverage]
        runs-on: ubuntu-latest
        continue-on-error: true
        steps:
        - name: Download Mocha test artifact
          uses: actions/download-artifact@v4
          with:
            name: mocha-test-results
        
        - name: Download Code Coverager artifact
          uses: actions/download-artifact@v4
          with:
            name: code-coverage

        - name: Merge test results
          run: |
            ls -ltr
            mkdir reports-${{ github.sha }}
            mv test-results.xml reports-${{ github.sha }}/
            mv cobertura-coverage.xml reports-${{ github.sha }}/
            ls -ltr reports-${{ github.sha }}
            

        - name: Upload report to S3
          uses: jakejarvis/s3-sync-action@master
          with:
            args: --follow-symlinks --delete
          env:
            AWS_S3_BUCKET: github-actions-project-report
            AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
            AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
            AWS_REGION: 'us-east-1'   
            SOURCE_DIR: 'reports-${{ github.sha }}'   
            DEST_DIR: 'reports-${{ github.sha }}' 

    docker:
      name: Containerize
      needs: [unit-testing, code-coverage]
      permissions:
        packages: write
      runs-on: ubuntu-latest
      steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: DockerHub login
        uses: docker/login-action@v3
        with:
          username: ${{ vars.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_PASSWORD }}

      - name: GHRC login
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.repository_owner }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Docker build for testing
        uses: docker/build-push-action@v6
        with:
          context: .
          push: false
          tags: ${{ vars.DOCKERHUB_USERNAME}}/solar-system:${{ github.sha }}

      - name: Docker Image Testing
        run: |
          docker images 
          docker run --name solar-system-app -d \
            -p 3000:3000 \
            -e MONGO_URI=$MONGO_URI \
            -e MONGO_USERNAME=${{ vars.MONGO_USERNAME}} \
            -e MONGO_PASSWORD=${{ secrets.MONGO_PASSWORD}} \
            ${{ vars.DOCKERHUB_USERNAME}}/solar-system:${{ github.sha }}
          
          export IP=$(docker inspect -f '{{range.NetworkSettings.Networks}}{{.IPAddress}}{{end}}' solar-system-app)
          echo $IP
          
          echo Testing Image URL using wget
          wget -q -O - 127.0.0.1:3000/live | grep live

      - name: Pushing to Multiple container registry (dockerhub and ghcr.io)
        uses: docker/build-push-action@v6
        with:
          context: .
          push: true
          tags: |
            ${{ vars.DOCKERHUB_USERNAME}}/solar-system:${{ github.sha }}
            ghcr.io/sh1vam6/solar-system:${{ github.sha }}  

    dev-deploy:
      if: contains(github.ref, 'feature/')
      name: Deploy to dev
      needs: docker
      uses: ./.github/workflows/resuable-workflow.yaml
      secrets:
        k8s-config: ${{ secrets.KUBECONFIG}}
        mongodb-password: ${{ secrets.MONGO_PASSWORD}}
      with:
        mongo-uri: ${{ vars.MONGO_URI}}
        environment: development
        k8s-manifest-dir: kubernetes/development/
      
    dev-integration-testing:
      if: contains(github.ref, 'feature/')
      name: Dev Integration testing
      needs: dev-deploy
      runs-on: ubuntu-latest
      steps:
      - name: Test url output using curl and jq
        env:
            URL: ${{ needs.dev-deploy.outputs.application-url}}
        run: |
            echo $URL
            echo "----------------"
            curl https://$URL/live | jq -r .status | grep -i live
         



    prod-deploy:
                if: github.ref == 'refs/head/main'
                name: Deploy to prod
                needs: docker
                uses: ./.github/workflows/resuable-workflow.yaml
                secrets:
                  k8s-config: ${{ secrets.KUBECONFIG}}
                  mongodb-password: ${{ secrets.MONGO_PASSWORD}}
                with:
                  mongo-uri: ${{ vars.MONGO_URI}}
                  environment: production
                  k8s-manifest-dir: kubernetes/production/
          
    prod-integration-testing:
                if: github.ref == 'refs/head/main'
                name: Prod Integration testing
                needs: prod-deploy
                runs-on: ubuntu-latest
                steps:
                - name: Test url output using curl and jq
                  env:
                      URL: ${{ needs.prod-deploy.outputs.application-url}}
                  run: |
                      echo $URL
                      echo "----------------"
                      curl https://$URL/live | jq -r .status | grep -i live

      